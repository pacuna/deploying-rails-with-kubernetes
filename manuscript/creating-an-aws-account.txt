## Creating an AWS Account

### Creating the account

By now you should have a DockerHub account ready for pushing and pulling images.
The other requirement for this book, is to have an AWS account.
Right now the two best integrations for Kubernetes are AWS and Google Compute Engine.
We will focus on AWS since I believe is a more mature Cloud provider at the moment.

If you don't have an AWS account already, go to the [official website](https://aws.amazon.com/)
and create one. As a warning, in this tutorial we'll be using resources not
covered by the [Free Tier](https://aws.amazon.com/free/) mainly because
a Rails application needs a bit more amount of computer resources
than the minimal offered by AWS. We're also going to need access to the Load Balancer
and S3 resources. But don't worry, after finish the tutorial, you can
drop the entire cluster with just one command and you are only would have to pay
for the time it was up.

The good thing about the Kubernetes integration with these services (AWS and GCE)
is that you don't even have to use their panels for the resources. This is because
the Kubernetes command for creating the cluster will create all the necessary resources for us.
We only have to configure the initial size of the cluster, the region and the type
of instances we want to create.

### Configuring the CLI

In order to allow Kubernetes to interact with our AWS account, we have to
configure the CLI in order to allow to manage resources for us.

First we'll a set of access keys. Go to the [AWS console](https://aws.amazon.com/console).
Now click on your name on the superior menu and go to `Security Credentials`. Then
click on `Access Keys (Access Key ID and Secret Access Key)` and create a new
access key. Download the file and put it on a safe place. We will need this values
for configuring the CLI and you won't be able to recover the secret token by any
other means.

The last thing is to be sure that you're using a profile with access to all
of the resources. If you are the owner of the account this will be the case by
default. If you're not, contact your account administrator for the access.

Now you can install the [CLI](http://aws.amazon.com/cli/) via pip (it requires python)
by running:

    pip install awscli

We have to tell the CLI which credentials should use. The easies way is to copy
the credentials in a file with the path `~/.aws/credentials`. Add the following
to that file:

    [default]
    aws_access_key_id = XXXXXXXXXXXXXXXXXXXX
    aws_secret_access_key = XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
